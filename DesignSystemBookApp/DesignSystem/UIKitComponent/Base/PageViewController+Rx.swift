//
//  RxPageViewController.swift
//  DesignSystemBookApp
//
//  Created by DOYEON LEE on 7/4/24.
//

import UIKit

import RxSwift
import RxCocoa

public protocol PageType: Hashable {
    var viewController: UIViewController { get }
}

/**
 RxPageViewController available with RxSwift.

 First, define the types of pages to be displayed as an enumeration.
 This enumeration is also used to determine which page to move to in a clear way, not by index.
 Thus, for all pages to be displayed, define the enumeration as follows:
 ```swift
 enum TestViewPage: PageType {
     case first
     case second
     case third
     
     var viewController: UIViewController {
         switch self {
         case .first:
             let vc = UIViewController()
             vc.view.backgroundColor = .gray02
             return vc
         case .second:
             let vc = UIViewController()
             vc.view.backgroundColor = .gray03
             return vc
         case .third:
             let vc = UIViewController()
             vc.view.backgroundColor = .gray05
             return vc
         }
     }
 }
```
 
 Create an RxPageViewController using the defined enumeration and inject the pages to be displayed into the initializer.
 - Important: The elements of the page array must not be duplicated.
 ```swift
 
 let pageViewController = RxPageViewController<TestViewPage>(page: [.first, .second, third])
 pageViewController.setupHirachy(self)
 
 pageViewController.view.snp.makeConstraints { make in
     make.edges.equalToSuperview()
 }
 
 // You can observe when the page changes by dragging.
 pageViewController.onMove
     .subscribe(onNext: { page in
         print(page) // result: first or second or third
     })
     .disposed(by: disposeBag)
 ```
 
 If you want to change the page configuration at runtime, use the updatePages(_:) method.
- Note: Even if you remove the current page from the configuration, it will not be removed from the screen immediately. Use this to modify the previous or next page.
 ```swift
 pageViewController.updatePages([.first, .second])
 ```
 */
open class RxPageViewController<Page: PageType>: UIPageViewController, UIPageViewControllerDataSource {
    // MARK: Event
    /// 페이지 변경시 변경 완료 후 현재 페이지가 방출되는 subject
    public let onMove = PublishSubject<Page>()
    
    // MARK: Public property
    /// 페이지 데이터 소스 pageType을 배열로 받는다.
    public var pages: [Page] = [] {
        didSet {
            viewControllersDict.removeAll()
            pages.forEach { page in
                viewControllersDict[page] = page.viewController
            }
        }
    }
    
    /// 현재 보여지고 있는 페이지 인덱스
    public var pageIndex: Binder<Page> {
        return Binder(self) { (pageViewController: RxPageViewController, page: Page) in
            guard let pageIndex = pageViewController.pages.firstIndex(of: page) else { return }
            pageViewController.moveToPage(at: pageIndex)
        }
    }
    
    // MARK: Private property
    /// A page enum list injected
    
    /// The View Controller generated by the computed property is accessed once and cached so that it is not regenerated.
    private var viewControllersDict: [Page: UIViewController] = [:]
    
    /// It need to determine the animation direction when changing pages from the outside(user drag).
    private var currentPageIndex: Int?
    
    private var isSetupFirstPage: Bool = false
    
    // MARK: DisposeBag
    private let disposeBag = DisposeBag()
    
    // MARK: Initializer
    init(
        pages: [Page],
        firstPage: Page,
        transitionStyle style: UIPageViewController.TransitionStyle = .scroll,
        navigationOrientation: UIPageViewController.NavigationOrientation = .horizontal
    ) {
        super.init(
            transitionStyle: style,
            navigationOrientation: navigationOrientation,
            options: nil
        )
        
        if pages.isEmpty {
            fatalError("You must provide at least one page.")
        }
        
        if !pages.contains(firstPage) {
            fatalError("The first page must be included in the page list.")
        }
        
        if pages.count != Set(pages).count {
            fatalError("There are duplicate pages.")
        }
        
        updatePages(pages)
        setupDeleagte()
        setupFirstPage(page: firstPage)
        setupBind()
    }
    
    public required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    // MARK: Public interface
    public func updatePages(_ pages: [Page]) {
        if pages.count != Set(pages).count {
            fatalError("There are duplicate pages.")
        }
        
        self.pages = pages
    }
    
    // MARK: Setup
    public func setupHirachy(_ parent: UIViewController) {
        parent.addChild(self)
        parent.view.addSubview(self.view)
        self.didMove(toParent: parent)
    }
    
    private func setupDeleagte() {
        self.dataSource = self
    }
    
    private func setupFirstPage(page: Page) {
        if let firstViewController = viewControllersDict[page],
            let firstPageIndex = pages.firstIndex(of: page) {
            setViewControllers([firstViewController], direction: .forward, animated: true, completion: nil)
            currentPageIndex = firstPageIndex
        }
    }
    
    private func setupBind() {
        self.rx.didFinishAnimating
            .subscribe(onNext: { [weak self] (_, _, transitionCompleted) in
                guard let self = self, transitionCompleted else { return }
                if let currentViewController = self.viewControllers?.first,
                   let currentPage = self.pages.first(where: {
                       self.viewControllersDict[$0] == currentViewController
                   }) {
                    self.currentPageIndex = self.pages.firstIndex(of: currentPage)
                    self.onMove.onNext(currentPage)
                }
            })
            .disposed(by: disposeBag)
    }
    
    // MARK: Data source
    public func pageViewController(
        _ pageViewController: UIPageViewController,
        viewControllerBefore viewController: UIViewController
    ) -> UIViewController? {
        guard let currentIndex = pages
            .firstIndex(where: { viewControllersDict[$0] == viewController })
        else { return nil }
        
        guard currentIndex > 0 else { return nil }

        let destination = pages[currentIndex - 1]
        return findViewController(for: destination)
    }
    
    public func pageViewController(
        _ pageViewController: UIPageViewController,
        viewControllerAfter viewController: UIViewController
    ) -> UIViewController? {
        guard let currentIndex = pages
            .firstIndex(where: { viewControllersDict[$0] == viewController })
        else { return nil }
        
        guard currentIndex < (pages.count - 1) else { return nil }
        
        let destination = pages[currentIndex + 1]
        return findViewController(for: destination)
    }
    
    private func findViewController(for page: Page) -> UIViewController {
        if let viewController = viewControllersDict[page] {
            return viewController
        } else {
            let newViewController = page.viewController
            viewControllersDict[page] = newViewController
            return newViewController
        }
    }
    
    /// Move to specific page
    private func moveToPage(at index: Int) {
        let selectedPage = pages[index].viewController
        let direction: UIPageViewController.NavigationDirection = index 
            > (currentPageIndex ?? 0) ? .forward : .reverse
        
        setViewControllers([selectedPage], direction: direction, animated: true, completion: nil)
        
        currentPageIndex = index
    }
}

// MARK: - Delegate extension
extension Reactive where Base: UIPageViewController {
    private var delegate: DelegateProxy<UIPageViewController, UIPageViewControllerDelegate> {
        return RxPageViewControllerProxy.proxy(for: self.base)
    }
    
    public var didFinishAnimating: Observable<(
        finished: Bool,
        previousViewControllers: [UIViewController],
        transitionCompleted: Bool
    )> {
        return delegate
            .methodInvoked(
                #selector(
                    UIPageViewControllerDelegate.pageViewController(
                        _:didFinishAnimating:previousViewControllers:transitionCompleted:
                    )
                )
            )
            .map { parameters in
                let finished = try castOrThrow(Bool.self, parameters[1])
                let previousViewControllers = try castOrThrow([UIViewController].self, parameters[2])
                let transitionCompleted = try castOrThrow(Bool.self, parameters[3])
                
                return (finished, previousViewControllers, transitionCompleted)
            }
    }
    
    public var willTransitionTo: Observable<[UIViewController]> {
        return delegate
            .methodInvoked(
                #selector(
                    UIPageViewControllerDelegate.pageViewController(_:willTransitionTo:)
                )
            )
            .map { parameters in
                return try castOrThrow([UIViewController].self, parameters[1])
            }
    }
    
    private func castOrThrow<T>(_ resultType: T.Type, _ object: Any) throws -> T {
        guard let returnValue = object as? T else {
            throw RxCocoaError.castingError(object: object, targetType: resultType)
        }

        return returnValue
    }
}

// MARK: - Delegate Proxy
final class RxPageViewControllerProxy: DelegateProxy<UIPageViewController, UIPageViewControllerDelegate>, DelegateProxyType, UIPageViewControllerDelegate {

    static func registerKnownImplementations() {
        self.register { (pageViewContoller) -> RxPageViewControllerProxy in
            RxPageViewControllerProxy(parentObject: pageViewContoller, delegateProxy: self)
        }
    }

    static func currentDelegate(
        for object: UIPageViewController
    ) -> UIPageViewControllerDelegate? {
        return object.delegate
    }

    static func setCurrentDelegate(
        _ delegate: UIPageViewControllerDelegate?, 
        to object: UIPageViewController
    ) {
        object.delegate = delegate
    }
}
